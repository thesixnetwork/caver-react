{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useCaverJsReact } from 'caverjs-react-core';\nimport { injected } from './connectors';\nexport function useEagerConnect() {\n  _s();\n\n  var _useCaverJsReact = useCaverJsReact(),\n      activate = _useCaverJsReact.activate,\n      active = _useCaverJsReact.active;\n\n  var _useState = useState(false),\n      tried = _useState[0],\n      setTried = _useState[1];\n\n  useEffect(function () {\n    injected.isAuthorized().then(function (isAuthorized) {\n      if (isAuthorized) {\n        activate(injected, undefined, true)[\"catch\"](function () {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(function () {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"YoilwU/l+hne0UZ2jAovzGqAxZY=\", false, function () {\n  return [useCaverJsReact];\n});\n\nexport function useInactiveListener() {\n  _s2();\n\n  var suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _useCaverJsReact2 = useCaverJsReact(),\n      active = _useCaverJsReact2.active,\n      error = _useCaverJsReact2.error,\n      activate = _useCaverJsReact2.activate;\n\n  useEffect(function () {\n    var _ref = window,\n        klaytn = _ref.klaytn;\n\n    if (klaytn && klaytn.on && !active && !error && !suppress) {\n      var handleConnect = function handleConnect() {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      };\n\n      var handleChainChanged = function handleChainChanged(chainId) {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      };\n\n      var handleAccountsChanged = function handleAccountsChanged(accounts) {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      var handleNetworkChanged = function handleNetworkChanged(networkId) {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      };\n\n      klaytn.on('connect', handleConnect);\n      klaytn.on('chainChanged', handleChainChanged);\n      klaytn.on('accountsChanged', handleAccountsChanged);\n      klaytn.on('networkChanged', handleNetworkChanged);\n      return function () {\n        if (klaytn.removeListener) {\n          klaytn.removeListener('connect', handleConnect);\n          klaytn.removeListener('chainChanged', handleChainChanged);\n          klaytn.removeListener('accountsChanged', handleAccountsChanged);\n          klaytn.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n  }, [active, error, suppress, activate]);\n}\n\n_s2(useInactiveListener, \"kGnLbj/utZGkFweamhcZtajZXOw=\", false, function () {\n  return [useCaverJsReact];\n});","map":{"version":3,"sources":["/Users/nantanart/git/caverjs-react/example/hooks.ts"],"names":["useState","useEffect","useCaverJsReact","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined","useInactiveListener","suppress","error","window","klaytn","on","handleConnect","console","log","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useCaverJsReact } from 'caverjs-react-core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useCaverJsReact()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useCaverJsReact()\n\n  useEffect((): any => {\n    const { klaytn } = window as any\n    if (klaytn && klaytn.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      klaytn.on('connect', handleConnect)\n      klaytn.on('chainChanged', handleChainChanged)\n      klaytn.on('accountsChanged', handleAccountsChanged)\n      klaytn.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (klaytn.removeListener) {\n          klaytn.removeListener('connect', handleConnect)\n          klaytn.removeListener('chainChanged', handleChainChanged)\n          klaytn.removeListener('accountsChanged', handleAccountsChanged)\n          klaytn.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}\n"]},"metadata":{},"sourceType":"module"}